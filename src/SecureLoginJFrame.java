/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Author: Grace Guo 
 * Class: ICS4UE-51
 * Program: Secure Login
 * Summary: The program allows for a user to login and register to a corporation. 
 * The program also has a function that allows the user to change their password if
 * they had forgotten it. 
 */

import java.util.Scanner;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.io.File; 
import java.io.FileNotFoundException; 
import java.io.IOException; 
import java.io.PrintWriter; 
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;

public class SecureLoginJFrame extends javax.swing.JFrame {
    
    private File UserData = new File("userData.txt"); //file storing user information 
    private File BadPasswords = new File("badPasswords.txt"); //file storing weak passwords 
    private String[] registrationData = new String[20]; //array storing user information 
    private Scanner input; 
    
    //inputted information 
    private String registUsername, registEmail, registPassword; //registration info 
    private String loginUsername, loginPassword; //login info
    private String newPassUsername, newPassEmail, newPassword; //changing password info 
    
    private String password;
    private String storedPasswordByte = "", storedLogPasswordByte = "", storedDigestPasswordByte = ""; //store encrypted passwords
    
    
    //checking for valid input
    private boolean validUser, validEmail, validPassword, strongPassword;  
    private boolean validNewPassword, strongNewPassword; 
    
    private int  numOfRegistrations; //number of registrations 
    
    private String curBadPassword;
    private StringTokenizer infoToBeTokened;
    
    //array storing specific type of user data 
    private String[] tokenUser = new String[20];
    private String[] tokenEmail = new String[20];
    private String[] tokenPassword = new String[20];
    
    //to compare whether login and registration info matches 
    private boolean correctUsername, correctPassword; 
    private int correctRegisterUsernum; 
    
    int correctNewUsernum; 
    boolean correctNewUsername, correctNewEmail; 
    
    boolean correctUser;
    int correctNumUser; 
    
    private String[] correctInfo = new String[1]; //array with information of matched login and registration 
    
    String passwordLabel = ""; //invalid password warning 

    /**
     * Creates new form SecureLoginJFrame
     */
    public SecureLoginJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel14 = new javax.swing.JLabel();
        secureLoginJPanel1 = new SecureLoginJPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        userRegTxtfield = new javax.swing.JTextField();
        passwordRegTxtbox = new javax.swing.JTextField();
        registButton = new javax.swing.JButton();
        invalidRegistLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        userLoginTxtbox = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        passwordLoginTxtbox = new javax.swing.JTextField();
        loginButton = new javax.swing.JButton();
        loginLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        newPassUserTxtbox = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        newPassEmailTxtbox = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        newPasswordTxtbox = new javax.swing.JTextField();
        newPasswordButton = new javax.swing.JButton();
        newPasswordLabel = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        emailRegtxtbox = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        emailInvalidLabel = new javax.swing.JLabel();
        invalidPasswordLabel = new javax.swing.JLabel();

        jLabel14.setText("jLabel14");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        jLabel1.setText("ACME Corporation - Putting Coyotes in the Hospital since 1952!");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setText("Enter Your Username:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setText("Enter Your Email:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel4.setText("Enter Your Password:");

        userRegTxtfield.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        passwordRegTxtbox.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        registButton.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        registButton.setText("Register");
        registButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registButtonActionPerformed(evt);
            }
        });

        invalidRegistLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel5.setText("Login Name:");

        userLoginTxtbox.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel6.setText("Password: ");

        passwordLoginTxtbox.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        loginButton.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        loginLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel7.setText("Forgot Your Password?");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel8.setText("Username:");

        newPassUserTxtbox.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel9.setText("Email:");

        newPassEmailTxtbox.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel10.setText("New Password:");

        newPasswordTxtbox.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        newPasswordButton.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        newPasswordButton.setText("Enter");
        newPasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPasswordButtonActionPerformed(evt);
            }
        });

        newPasswordLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel11.setText("_______________________________________________________________________________________");

        emailRegtxtbox.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel12.setText("New User Account");

        jLabel13.setText("____________________________________________________________________________________");

        emailInvalidLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        invalidPasswordLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        javax.swing.GroupLayout secureLoginJPanel1Layout = new javax.swing.GroupLayout(secureLoginJPanel1);
        secureLoginJPanel1.setLayout(secureLoginJPanel1Layout);
        secureLoginJPanel1Layout.setHorizontalGroup(
            secureLoginJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, secureLoginJPanel1Layout.createSequentialGroup()
                .addGroup(secureLoginJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(secureLoginJPanel1Layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addGroup(secureLoginJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(secureLoginJPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(userLoginTxtbox, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(passwordLoginTxtbox, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(162, 162, 162))
                            .addGroup(secureLoginJPanel1Layout.createSequentialGroup()
                                .addGroup(secureLoginJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(secureLoginJPanel1Layout.createSequentialGroup()
                                        .addGroup(secureLoginJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4))
                                        .addGap(53, 53, 53)
                                        .addGroup(secureLoginJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(emailRegtxtbox, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(userRegTxtfield, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(passwordRegTxtbox, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(secureLoginJPanel1Layout.createSequentialGroup()
                                        .addGap(424, 424, 424)
                                        .addComponent(jLabel12))
                                    .addGroup(secureLoginJPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(newPassUserTxtbox, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(92, 92, 92)
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(newPassEmailTxtbox, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(secureLoginJPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addGap(18, 18, 18)
                                        .addComponent(newPasswordTxtbox, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(secureLoginJPanel1Layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addComponent(newPasswordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(newPasswordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(secureLoginJPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(secureLoginJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(secureLoginJPanel1Layout.createSequentialGroup()
                                .addComponent(loginLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 706, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(99, 99, 99)
                                .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(registButton, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, secureLoginJPanel1Layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addGroup(secureLoginJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(invalidRegistLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 723, Short.MAX_VALUE)
                            .addComponent(emailInvalidLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(invalidPasswordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(42, 42, 42))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, secureLoginJPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(secureLoginJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, secureLoginJPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(403, 403, 403))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, secureLoginJPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 844, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(130, 130, 130))))
            .addGroup(secureLoginJPanel1Layout.createSequentialGroup()
                .addGroup(secureLoginJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(secureLoginJPanel1Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jLabel1))
                    .addGroup(secureLoginJPanel1Layout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 820, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        secureLoginJPanel1Layout.setVerticalGroup(
            secureLoginJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(secureLoginJPanel1Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabel1)
                .addGap(44, 44, 44)
                .addGroup(secureLoginJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(userLoginTxtbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(passwordLoginTxtbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(secureLoginJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loginButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addGap(33, 33, 33)
                .addComponent(jLabel12)
                .addGap(43, 43, 43)
                .addGroup(secureLoginJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(userRegTxtfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(secureLoginJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailRegtxtbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(secureLoginJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(passwordRegTxtbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addComponent(registButton)
                .addGap(6, 6, 6)
                .addComponent(invalidRegistLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(emailInvalidLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(invalidPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addGap(33, 33, 33)
                .addGroup(secureLoginJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(secureLoginJPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(43, 43, 43)
                        .addGroup(secureLoginJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(newPassUserTxtbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(newPassEmailTxtbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(secureLoginJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(newPasswordTxtbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addComponent(newPasswordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE))
                    .addComponent(newPasswordButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(secureLoginJPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(secureLoginJPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(85, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void registButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registButtonActionPerformed
 
        //getting inputted registration information 
        registUsername = userRegTxtfield.getText();
        registEmail = emailRegtxtbox.getText();
        registPassword = passwordRegTxtbox.getText();
        
        //checking for invalid username and password 
        userNameRegistration();  
        emailRegistration(); 
        
        //checking for invalid password 
        validPassword = passwordInput(registPassword, validPassword); 
        strongPassword = badPasswordRegistration(registPassword, strongPassword); 
        
        invalidPasswordLabel.setText(passwordLabel); 
        passwordLabel = ""; 
        
        if(validUser && validEmail && validPassword && strongPassword){ //username, email, and password are valid 
            try { 
                readFile(); //store information from of previous inputted data 
                storeRegistrationInformation(); //store the registration information 
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(SecureLoginJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_registButtonActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        
        try {
            readFile(); //store information from of previous inputted data 
            compareRegistAndLogin(); //check is registration and login info matched 
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(SecureLoginJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //clear the textboxes 
        userLoginTxtbox.setText(""); 
        passwordLoginTxtbox.setText(""); 
        
    }//GEN-LAST:event_loginButtonActionPerformed

    private void newPasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPasswordButtonActionPerformed
        
        readFile(); //read userdata file 
        newPassword = newPasswordTxtbox.getText();  //get inputted new password 
        newPassword(); //check validity of new password 
        
    }//GEN-LAST:event_newPasswordButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SecureLoginJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SecureLoginJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SecureLoginJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SecureLoginJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SecureLoginJFrame().setVisible(true);
            }
        });
    }
    
    /**
     * Read the information in the user data file 
     */
    public void readFile(){
        try{
            input = new Scanner(UserData); 
            numOfRegistrations = 0; 
            
            while(input.hasNext()){ //there is more information to be read 
                registrationData[numOfRegistrations] = input.nextLine(); //read and store info from file 
                numOfRegistrations++; 
            }
        }catch(FileNotFoundException ex){
        }
        input.close(); 
    }
    
    /**
     * Check the validity of the registered username 
     */
    public void userNameRegistration(){
        try{
            if(registUsername.equals("")){//username textbox is empty 
                throw new RegisterEmptyUsername(); //throw exception 
            }else{
                validUser = true; 
                invalidRegistLabel.setText(""); 
            }
        }catch(RegisterEmptyUsername ex){
            invalidRegistLabel.setText("Please do not register with a blank username."); //display warning for invalid username 
            userRegTxtfield.setText("");  
            validUser = false;
        }
    }
    
    /**
     * Check the validity of the registered email
     */
    public void emailRegistration(){
        try{
            if(registEmail.contains("@")&&registEmail.contains(".")){//email registration is valid, contains '@' and '.'
                validEmail = true; 
                emailInvalidLabel.setText(""); 
            }else{ //email registration is invalid 
                throw new InvalidEmail(); //throw an exception 
            }
        }catch(InvalidEmail ex){
            emailInvalidLabel.setText("Please register with a valid email address."); //display warning for invalid email
            emailRegtxtbox.setText("");  
            validEmail = false;
        }
    } 
    
    /**
     * Check if the password is long enough 
     * @param inputPassword inputted password
     * @param validPass inputted validity of length 
     * @return whether the password is long enough 
     */
    public boolean passwordInput(String inputPassword, boolean validPass){
        try{ 
            if(inputPassword.length() < 4){//registered password is too short 
                throw new InvalidLengthPassword(); 
            }else{//considered long password if at least 4 characters 
                validPass = true;
            }
        }catch(InvalidLengthPassword ex){
            passwordLabel += "Your password should be at least 4 characters long."; //warning for short password 
            passwordRegTxtbox.setText("");
            validPass = false;
        }
        return validPass; 
    }
    
    /**
     * Check if the password is weak
     * @param inputPassword inputted password
     * @param strongPass validity of password length
     * @return whether the password is strong enough 
     */
    public boolean badPasswordRegistration(String inputPassword, boolean strongPass){ 
        try{
            input = new Scanner(BadPasswords); //bad password file 
            while(input.hasNext()){//more information to compare  
                curBadPassword = input.nextLine(); 
                //check that the registered password is not a bad password listed in the file
                if(inputPassword.equals(curBadPassword.trim())){ //is a bad password 
                    throw new WeakPassword(); //throw exception for a weak password 
                }
            } 
            strongPass = true; //is a strong password 
            
        }catch(FileNotFoundException ex){
        }catch(WeakPassword ex){
            passwordLabel += "Your password is too weak. Please register with a harder password."; //warning for weak password 
            passwordRegTxtbox.setText("");
            strongPass = false; //is a weak password 
        }
        input.close(); 
        return strongPass;
    }
    
    /**
     * Stores the information registered by the user 
     * @throws NoSuchAlgorithmException 
     */
    public void storeRegistrationInformation() throws NoSuchAlgorithmException{ 
        
        storedPasswordByte = encrypt(registPassword); //encrypt the password 
        numOfRegistrations ++; 
        registrationData[numOfRegistrations-1] = registUsername + ";" + registEmail + ";" + storedPasswordByte; //store registration info 
        
        writeToFile(); //write the registration info into the user data file
        
        invalidRegistLabel.setText("You have been registered into the ACME Corporation Database.");
        
        prepareForNewRegistration(); //reset variables and text field for new registration
    }
    
    /**
     * Writes information into a file 
     */
    public void writeToFile(){
        try{ 
            PrintWriter output = new PrintWriter(UserData);
            for(int i = 0; i<= numOfRegistrations - 1; i++){
                output.println(registrationData[i]); //writing information to user data file 
            }
            output.close(); //closing the output 
        }catch(IOException ex){
        }
    }
    
    /**
     * Prepare for a new registration 
     */
    public void prepareForNewRegistration(){
        //setting all validity checkers to false 
        validUser = false; 
        validEmail = false; 
        validPassword = false; 
        strongPassword = false; 
        
        //clear text fields 
        userRegTxtfield.setText(""); 
        emailRegtxtbox.setText("");
        passwordRegTxtbox.setText("");
    } 
    
    /**
     * Encrypts the password
     * @param password the inputted password 
     * @return the encrypted password 
     * @throws NoSuchAlgorithmException 
     */
    public String encrypt(String password) throws NoSuchAlgorithmException{
        this.password = password; 
        MessageDigest digestPassword = MessageDigest.getInstance("MD5"); 
        
        digestPassword.update(password.getBytes()); //get the bytes of the inputted password 
        byte byteDigest[] = digestPassword.digest(); //digest the password 
        
        storedDigestPasswordByte = ""; 
        
        for(int i = 0; i < byteDigest.length-1; ++i){
            storedDigestPasswordByte += (Integer.toHexString((byteDigest[i] & 0xFF)|0x100).substring(1,3)); //store the encrypted password 
        }
        
        return storedDigestPasswordByte; 
    }
    
    /**
     * Checks whether the login information is correct 
     * @throws NoSuchAlgorithmException 
     */
    public void compareRegistAndLogin() throws NoSuchAlgorithmException{
        
        //get inputted login information 
        loginUsername = userLoginTxtbox.getText();
        loginPassword = passwordLoginTxtbox.getText(); 
        
        storedLogPasswordByte = encrypt(loginPassword); //encrypt the inputted login password 
        
        checkingMatchedInfo(loginUsername, correctUsername, correctRegisterUsernum); //check if encrypted login password matches regisration password 
        
        for(int i = 0; i<= correctInfo.length-1;i++){
            infoToBeTokened = new StringTokenizer(correctInfo[i],";",false);
            
            //checks the array storing wheher information matched 
            correctUsername = Boolean.valueOf(infoToBeTokened.nextToken()); 
            correctRegisterUsernum = Integer.valueOf(infoToBeTokened.nextToken()); 
        }
        
        if(correctUsername){//username matches 
            
            if(tokenPassword[correctRegisterUsernum].equals(storedLogPasswordByte)){//password matches 
                correctPassword = true; 
            }else{
                correctPassword = false; 
            }
        } 
        
        allowOrPreventLogin();//allows or deny user access 
    }
    
    /**
     * Allows or denies the user access based on whether the information inputted is correct 
     */
    public void allowOrPreventLogin(){
        if(correctUsername && correctPassword){//allows user access 
            loginLabel.setText("Welcome to the ACME Corportion!"); 
        }else{//denies user access 
            loginLabel.setText("Combination of username and password not found."); 
        }
        correctUsername = false; 
        correctPassword = false; 
    }
    
    /**
     * Checks if the login information matches any of the registered information 
     * @param username inputted username of the user 
     * @param correctUser whether the login matches any registration information 
     * @param correctNumUser the index of the matched login and registration username 
     */
    public void checkingMatchedInfo(String username, boolean correctUser, int correctNumUser){
        
        try {
            input = new Scanner(UserData);
            
            for(int i = 0; i <= numOfRegistrations - 1; i++){//store each token of specific registration data into respective parallel arrays 
                infoToBeTokened = new StringTokenizer(input.nextLine(),";",false); //tokenize the registration information 
                
                //storing different types of registration data 
                tokenUser[i] = infoToBeTokened.nextToken(); 
                tokenEmail[i] = infoToBeTokened.nextToken(); 
                tokenPassword[i] = infoToBeTokened.nextToken(); 
                
                if(tokenUser[i].equals(username)){//login username matches an already registered username 
                    this.correctUser = true; 
                    this.correctNumUser = i; //keep track of the index of the matched username 
                }
            }
            
            for(int a=0; a<= correctInfo.length-1; a++){//store the information about the matched users
                correctInfo[a] = Boolean.toString(this.correctUser) + ";" + Integer.toString(this.correctNumUser); 
            }
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(SecureLoginJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        input.close(); //close the input object 
    }
    
    /**
     * Checks if the correct information is inputted to create a new password 
     */
    public void newPassword(){
        
        //get inputted information 
        newPassUsername = newPassUserTxtbox.getText(); 
        newPassEmail = newPassEmailTxtbox.getText();
        
        checkingMatchedInfo(newPassUsername, correctNewUsername, correctNewUsernum); //check if input info matched registration 
        
        for(int i = 0; i<= correctInfo.length-1;i++){

            //data of whether the usernames matched 
            infoToBeTokened = new StringTokenizer(correctInfo[i],";",false);
            correctNewUsername = Boolean.valueOf(infoToBeTokened.nextToken()); 
            correctNewUsernum = Integer.valueOf(infoToBeTokened.nextToken()); 
        }
        
        if(tokenEmail[correctNewUsernum].equals(newPassEmail)){//check if the email at that index matches inputted email 
            correctNewEmail = true;   
        }
        
        try {
            newPasswordCheck(); //allow or deny user to change passwords 
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(SecureLoginJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Allows or denies user to change their password 
     * @throws NoSuchAlgorithmException 
     */
    public void newPasswordCheck()throws NoSuchAlgorithmException{
        
        if(correctNewUsername && correctNewEmail){//usernames and emails from input and registration match 
            
            validNewPassword = passwordInput(newPassword, validNewPassword);//check invalid password length 
            strongNewPassword = badPasswordRegistration(newPassword, strongNewPassword);//check weak password 
            
            if(validNewPassword && strongNewPassword){//new password is strong and long enough  
                tokenPassword[correctNewUsernum] = encrypt(newPassword); //encrypt the new password 
                registrationData[correctNewUsernum] = tokenUser[correctNewUsernum] + ";" + tokenEmail[correctNewUsernum] + ";" + tokenPassword[correctNewUsernum]; //store the updated info
                
                writeToFile(); //write information in user data file 
                newPasswordLabel.setText("You have successfully changed your password.");
                clearNewFields();
            }else{
                newPasswordLabel.setText(passwordLabel); //warning for invalid password 
                passwordLabel = "";
                newPasswordTxtbox.setText("");
            } 
             
            
        }else{
            newPasswordLabel.setText("Combination of username and email not found."); 
            clearNewFields(); 
        }
        correctNewUsername = false; 
        correctNewEmail = false; 
    }
    
    /**
     * Clearing the fields for the new password function 
     */
    public void clearNewFields(){
        
        //clear information for creating new password 
        newPassEmailTxtbox.setText("");
        newPassUserTxtbox.setText("");
        newPasswordTxtbox.setText(""); 
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel emailInvalidLabel;
    private javax.swing.JTextField emailRegtxtbox;
    private javax.swing.JLabel invalidPasswordLabel;
    private javax.swing.JLabel invalidRegistLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton loginButton;
    private javax.swing.JLabel loginLabel;
    private javax.swing.JTextField newPassEmailTxtbox;
    private javax.swing.JTextField newPassUserTxtbox;
    private javax.swing.JButton newPasswordButton;
    private javax.swing.JLabel newPasswordLabel;
    private javax.swing.JTextField newPasswordTxtbox;
    private javax.swing.JTextField passwordLoginTxtbox;
    private javax.swing.JTextField passwordRegTxtbox;
    private javax.swing.JButton registButton;
    private SecureLoginJPanel secureLoginJPanel1;
    private javax.swing.JTextField userLoginTxtbox;
    private javax.swing.JTextField userRegTxtfield;
    // End of variables declaration//GEN-END:variables
}
